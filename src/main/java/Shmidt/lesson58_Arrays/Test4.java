package main.java.Shmidt.lesson58_Arrays;

import static main.java.Shmidt.lesson58_Arrays.Test1.*;
import static main.java.Shmidt.lesson58_Arrays.Test3.*;

public class Test4 {
    public static void main(String[] args) {

        int[] a = fillArray(20);

        int[] b = bubbleSort(a);

        for (int j : b) {
            System.out.print(j + " ");
        }
        System.out.println("median: " + median(b));
    }

    static double median(int[] a) {
        double median;

        if (a.length % 2 == 0)
            median = (double)(a[a.length / 2] + a[a.length / 2 + 1]) / 2;
         else
            median = a[a.length / 2];
        return median;
    }
}
/*
Реализуйте метод int median(int[] a), который возвращает целочисленное значение медианы массива а.
Для отсортированного массива четной длины медиана расчитывается как среднее арифметическое двух центральных элементов.
Для отсортированного массива нечетной длины медиана расчитывается как центральный элемент.
В общем случае, для набора 1 2 3 4 5 медиана равна 3, а для четного набора 1 2 3 4 5 6 медиана расчитывается как (3 + 4)/2 = 3.5

Для сортировки массива используйте метод Arrays.sort или метод bubbleSort из третьего задания.
Порядок элементов в исходном массиве, который передается в метод через аргумент, не должен быть изменен.

Напишите программу, которая создает массив из 20 целочисленных элементов,
заполняет случайным образом , выводит элементы в одну строку, разделив пробелами.
Затем, используя метод median, получите и выведите значение вычисленной медианы.
После этого вновь напечатайте элементы исходного массива в одну строку, разделив пробелами,
чтобы убедиться, что их порядок не изменился.

Пример работы программы:
Вывод:
Создан массив: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
Медиана: 10
Повторный ввод исходного массива: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
 */